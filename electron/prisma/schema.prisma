// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Plugin {
  id             String   @id @default(cuid())
  name           String
  description    String
  author         String
  category       String
  iconUrl        String?  @map("icon_url")
  downloadCount  Int      @default(0) @map("download_count")
  averageRating  Float    @default(0) @map("average_rating")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  isActive       Boolean  @default(true) @map("is_active")
  isVerified     Boolean  @default(false) @map("is_verified")

  versions    PluginVersion[]
  permissions PluginPermission[]
  userPlugins UserPlugin[]
  ratings     PluginRating[]

  @@map("plugins")
}

model PluginVersion {
  id           String   @id @default(cuid())
  pluginId     String   @map("plugin_id")
  version      String
  entryPoint   String   @map("entry_point")
  manifestPath String   @map("manifest_path")
  releaseDate  DateTime @map("release_date")
  isStable     Boolean  @default(true) @map("is_stable")
  changelog    String?

  plugin Plugin       @relation(fields: [pluginId], references: [id], onDelete: Cascade)
  files  PluginFile[]

  @@map("plugin_versions")
}

model PluginPermission {
  id             String  @id @default(cuid())
  pluginId       String  @map("plugin_id")
  permissionType String  @map("permission_type")
  description    String
  isRequired     Boolean @default(true) @map("is_required")

  plugin Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@map("plugin_permissions")
}

model User {
  id          String    @id @default(cuid())
  username    String    @unique
  email       String    @unique
  preferences Json?
  createdAt   DateTime  @default(now()) @map("created_at")
  lastLoginAt DateTime? @map("last_login_at")

  userPlugins UserPlugin[]
  ratings     PluginRating[]

  @@map("users")
}

model UserPlugin {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  pluginId         String    @map("plugin_id")
  installedVersion String    @map("installed_version")
  installedAt      DateTime  @default(now()) @map("installed_at")
  lastUsedAt       DateTime? @map("last_used_at")
  isEnabled        Boolean   @default(true) @map("is_enabled")
  settings         Json?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  plugin Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([userId, pluginId])
  @@map("user_plugins")
}

model PluginFile {
  id        String @id @default(cuid())
  versionId String @map("version_id")
  filePath  String @map("file_path")
  fileHash  String @map("file_hash")
  fileSize  Int    @map("file_size")
  fileType  String @map("file_type")

  version PluginVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@map("plugin_files")
}

model PluginRating {
  id       String   @id @default(cuid())
  userId   String   @map("user_id")
  pluginId String   @map("plugin_id")
  rating   Int // 1-5 stars
  review   String?
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  plugin Plugin @relation(fields: [pluginId], references: [id], onDelete: Cascade)

  @@unique([userId, pluginId])
  @@map("plugin_ratings")
}

model AppSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("app_settings")
}